{"name":"Geocoder","tagline":"A simplistic Python Geocoder (Google, Bing, OSM & more)","body":"#Python Geocoder\r\n\r\n![Version](https://pypip.in/v/geocoder/badge.png)\r\n![Downloads](https://pypip.in/d/geocoder/badge.png)\r\n![Build](https://travis-ci.org/DenisCarriere/geocoder.png?branch=master)\r\n\r\n\r\nA simplistic Python Geocoder.\r\n\r\nGeocoder is an Apache2 Licensed Geocoding library, written in Python.\r\n\r\n    >>> import geocoder\r\n    >>> g = geocoder.google('Moscone Center')\r\n    >>> g.latlng\r\n    (37.784173, -122.401557)\r\n    >>> g.city\r\n    'San Francisco'\r\n    ...\r\n\r\n##Installation\r\nYou can install, upgrade, uninstall Geocoder with these commands:\r\n\r\n    $ pip install geocoder\r\n    $ pip install --upgrade geocoder\r\n    $ pip uninstall geocoder\r\n\r\n#Documentation\r\n\r\n##Basic Usage\r\n    >>> import geocoder\r\n    >>> g = geocoder.google('1600 Amphitheatre Pkwy, Mountain View, CA')\r\n    >>> g.latlng\r\n    (37.784173, -122.401557)\r\n    >>> g.postal\r\n    '94043'\r\n    >>> g.city\r\n    'Mountain View'\r\n    >>> g.country\r\n    'United States'\r\n    ...\r\n\r\n\r\n##Getting JSON\r\n\r\n    >>> g = geocoder.google('1600 Amphitheatre Parkway, Mountain View, CA')\r\n    >>> g.json\r\n    {'address': '1600 Amphitheatre Parkway, Mountain View, CA 94043, USA',\r\n    'bbox': {'northeast': {'lat': 37.4233474802915, 'lng': -122.0826054197085},\r\n    'southwest': {'lat': 37.4206495197085, 'lng': -122.0853033802915}},\r\n    'city': 'Mountain View',\r\n    'country': 'United States',\r\n    'lat': 37.4219985,\r\n    'lng': -122.0839544,\r\n    'location': '1600 Amphitheatre Parkway, Mountain View, CA 94043, USA',\r\n    'ok': True,\r\n    'postal': '94043',\r\n    'provider': 'Google',\r\n    'quality': 'ROOFTOP',\r\n    'status': 'OK'}\r\n    ...\r\n\r\n##Distance Calculator\r\nUsing the Great Circle distance by using the Harversine formula.\r\n\r\n    >>> d = geocoder.distance('Ottawa', 'Toronto')\r\n    >>> d.km\r\n    351.902264779\r\n    >>> d.miles\r\n    218.672067333\r\n    ...\r\n\r\nDifferent ways to use the Distance calculator, you can input the locations \r\nby using a tuple (lat, lng) or a dictionary with lat/lng keys.\r\n\r\n    >>> import geocoder\r\n    >>> ottawa = (45.4215296, -75.69719309999999)\r\n    >>> toronto = {'lat':43.653226, 'lng':-79.3831843}\r\n    >>> d = geocoder.distance(ottawa, toronto)\r\n    >>> d.meters\r\n    351902\r\n    ...\r\n\r\nOfficial Docs - http://en.wikipedia.org/wiki/Haversine_formula\r\n\r\n##Reverse Geocoding\r\nUsing Google's reverse geocoding API, you are able to\r\ninput a set of coordinates and geocode it's location.\r\n\r\n    >>> latlng = (48.85837, 2.2944813)\r\n    >>> g = geocoder.reverse(latlng)\r\n    <[OK] Geocoder Google [Eiffel Tower, Paris, France]>\r\n    ...\r\n\r\nOfficial Docs - https://developers.google.com/maps/documentation/geocoding\r\n\r\n\r\n##Bounding Box (Extent)    \r\n    >>> g = geocoder.osm('1600 Amphitheatre Pkwy, Mountain View, CA')\r\n    >>> g.bbox\r\n    {'northeast': {'lat': 37.4233474802915, 'lng': -122.0826054197085},\r\n    'southwest': {'lat': 37.4206495197085, 'lng': -122.0853033802915}}\r\n    >>> g.southwest\r\n    {'lat': 37.4206495197085, 'lng': -122.0853033802915}\r\n    >>> g.south\r\n    37.4206495197085\r\n    ...\r\n\r\n##Geocoding IP Address\r\nRetrieves geocoding data from MaxMind's GeoIP2 services\r\n\r\n    >>> g = geocoder.ip('74.125.226.99')\r\n    >>> g.address\r\n    'Mountain View, California United States'\r\n    >>> g.latlng\r\n    (37.4192, -122.0574)\r\n\r\nGeocoding your current IP address, simply use **'me'** as the input.\r\n\r\n    >>> g = geocoder.ip('me')\r\n    >>> g.address\r\n    'Ottawa, Ontario Canada'\r\n    >>> g.latlng\r\n    (45.4805, -75.5237)\r\n    ...\r\n\r\nOfficial Docs - http://www.maxmind.com/en/web_services\r\n\r\n##Population Data from City\r\nRetrieves population data from Geonames's Web Service API.\r\n\r\n    >>> pop = geocoder.population('Springfield, Virginia')\r\n    >>> pop\r\n    30484\r\n    ...\r\n\r\nOfficial Docs - http://www.geonames.org/export/web-services.html\r\n\r\n\r\n##Geocoder Attributes\r\n- address\r\n- location\r\n- city\r\n- country\r\n- postal\r\n- quality\r\n- status\r\n- population (integer)\r\n- ok (boolean)\r\n- x, lng, longitude (float)\r\n- y, lat, latitude (float)\r\n- latlng, xy (tuple)\r\n- bbox {southwest, northeast}\r\n- southwest {lat, lng}\r\n- northeast {lat, lng}\r\n- south, west, north, east (float)\r\n\r\n\r\n##Distance Attributes\r\n- km (float)\r\n- miles (float)\r\n- meters (integer)\r\n- feet (integer)\r\n\r\n\r\n##Geocoding Providers\r\n    Priority Geocoders\r\n    >>> geocoder.google(<location>)\r\n    >>> geocoder.reverse(<latlng>)\r\n    >>> geocoder.ip(<ip>)\r\n\r\n    Secondary Geocoders\r\n    >>> geocoder.osm(<location>)\r\n    >>> geocoder.mapquest(<location>)\r\n    >>> geocoder.arcgis(<location>)\r\n    >>> geocoder.geonames(<location>, username='XXXXX')\r\n    >>> geocoder.bing(<location>, key='XXXXX')\r\n    >>> geocoder.nokia(<location>, app_id='XXXXX', app_code='XXXXX')\r\n    >>> geocoder.tomtom(<location>, key='XXXXX')\r\n    ...\r\n\r\n##Command Line\r\n    $ geocoder Ottawa\r\n    45.4215296, -75.69719309999999\r\n\r\n\r\nMore interaction with command line will soon follow. \r\n\r\n#Contribute\r\nPlease feel free to give any feedback on this module, it is still in it's early stages of production. If you have any questions about GIS & Python you can contact @DenisCarriere for any questions.\r\n","google":"UA-29296396-1","note":"Don't delete this file! It's used internally to help with page regeneration."}